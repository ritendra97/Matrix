//solve the sudoku
import java.util.*;
public class Matrix 
{
	public static boolean sudokuAutomation(int[][] board,int n)
	{
		int row=-1;
		int col=-1;
		boolean isEmpty=true;
		for(int i=0;i<board.length;i++)
		{
			for(int j=0;j<board.length;j++)
			{
				if(board[i][j]==0)
				{
					row=i;
					col=j;
					isEmpty=false;
					break;
				}
			}
			if(!isEmpty)
			{
				break;
			}
		}
		if(isEmpty)
		{
			return true;
		}
		for(int num=1;num<=n;num++)
		{
			if(issafePlace(board,row,col,num))
			{
				board[row][col]=num;
				if(sudokuAutomation(board,n))
					return true;
				else
					board[row][col]=0;
			}
		}
		return false;
	}
	public static boolean issafePlace(int[][] board ,int row,int col,int num)
	{
		for(int i=0;i<board.length;i++)
		{
			if(board[row][i]==num)
				return false;
		}
		for(int j=0;j<board.length;j++)
		{
			if(board[j][col]==num)
				return false;
		}
		int sqrt = (int) Math.sqrt(board.length);
		int rowstart = row-row%sqrt;
		int colstart = col-col%sqrt;
		for(int r = rowstart;r<rowstart+sqrt;r++)
		{
			for(int c = colstart;c<colstart+sqrt;c++)
			{
				if(board[r][c]==num)
					return false;
			}
		}
		return true;
	}
	public static void print(int[][] board,int N)
	{
		for(int i=0;i<N;i++)
		{
			for(int j=0;j<N;j++)
			{
				System.out.print(board[i][j]+" ");
			}
			System.out.println();
		}
	}
	public static void main(String[] args) 
	{
		int[][] board = {{0,2,3,0},
				         {0,0,0,1},
			           	 {0,1,0,0},
				         {2,4,1,0}};
		int N = board.length;
		if(sudokuAutomation(board,N))
		{
			print(board,N);
		}
		else
		{
			System.out.println("No sudoku exist:");
		}
	}
}
