//Find median in row wise sorted matrix

import java.util.Comparator;
import java.util.PriorityQueue;

class Node{
    int data;
    int row;
    int col;

    Node(int data, int row, int col){
        this.data = data;
        this.row = row;
        this.col = col;
    }
}

class ArrayProblems{

    public static int median(int matrix[][],int r,int c) {
        
        int median = -1;
        int count = 0;
        int medianIndex = r*c/2;    
        PriorityQueue<Node> minHeap = new PriorityQueue<>(new Comparator<Node>() {
           public int compare(Node n1, Node n2){
                return n1.data-n2.data;
           }; 
        });
        for(int i = 0;i<r;i++){
            minHeap.add(new Node(matrix[i][0],i,0));
        }

        while(count<=medianIndex){
            Node top = minHeap.remove();
            median = top.data;
            count++;
            if(top.col+1<c){
                minHeap.add(new Node(matrix[top.row][top.col+1], top.row,top.col+1));
            }
        }
        return median;
    }

    public static void main(String[] args) {
        
        int r=3;
        int c=3;
        int matrix[][] = {{1, 3, 5},
                          {2, 6, 9},
                          {3, 6, 9}};
        System.out.print(median(matrix, r, c));
    }  
}
import java.util.*;
public class Matrix 
{ 
	static int binaryMedian(int m[][],int r, int c) 
   { 
    int max = Integer.MIN_VALUE; 
    int min = Integer.MAX_VALUE; 
      
    for(int i=0; i<r ; i++) 
    { 
         
        if(m[i][0] < min) 
            min = m[i][0]; 
          
        // Finding the maximum element 
        if(m[i][c-1] > max) 
            max = m[i][c-1]; 
    } 
      
    int desired = (r * c + 1) / 2; 
    while(min < max) 
    { 
        int mid = min + (max - min) / 2; 
        int place = 0; 
        int get = 0; 
          
        // Find count of elements smaller than mid 
        for(int i = 0; i < r; ++i) 
        { 
              
            get = Arrays.binarySearch(m[i],mid); 
              
            // If element is not found in the array the  
            // binarySearch() method returns  
            // (-(insertion_point) - 1). So once we know  
            // the insertion point we can find elements 
            // Smaller than the searched element by the  
            // following calculation 
            if(get < 0) 
                get = Math.abs(get) - 1; 
              
            // If element is found in the array it returns  
            // the index(any index in case of duplicate). So we go to last 
            // index of element which will give  the number of  
            // elements smaller than the number including  
            // the searched element. 
            else
            { 
                while(get < m[i].length && m[i][get] == mid) 
                    get += 1; 
            } 
              
            place = place + get; 
        } 
          
        if (place < desired) 
            min = mid + 1; 
        else
            max = mid; 
    } 
    return min; 
} 
  
	public static void main(String[] args) 
	{
		 int mat[][] = { {1,3,5},
		                 {2,6,9},
		                 {3,6,9}};
		 int R=3;
		 int C=3;
		 System.out.print(binaryMedian(mat,R,C));
	}
}
